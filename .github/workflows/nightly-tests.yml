name: 🌙 Nightly Comprehensive Tests

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      full_suite:
        description: 'Run full test suite including stress tests'
        required: true
        default: true
        type: boolean

permissions:
  contents: read
  issues: write
  pull-requests: write
  actions: read

env:
  NODE_VERSION: '20'

jobs:
  comprehensive-test:
    name: 🔍 Comprehensive Test Suite
    runs-on: ubuntu-latest
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, chrome, firefox]
        environment: [staging, production]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: 🧪 Run Full Test Suite
        run: |
          npx playwright test --project=${{ matrix.browser }} --grep="@smoke|@regression|@critical"
        env:
          TEST_ENV: ${{ matrix.environment }}
          FULL_SUITE: ${{ github.event.inputs.full_suite || 'true' }}

      - name: 📊 Generate CTRF Summary
        if: always()
        run: |
          if [ -f "test-results/ctrf-report.json" ]; then
            echo "🔍 CTRF Report Found - Generating Summary"
            npm run ctrf:summary
            
            # Display test summary in console
            echo "=================================================================================="
            echo "📊 NIGHTLY TEST SUMMARY - ${{ matrix.browser }} on ${{ matrix.environment }}"
            echo "=================================================================================="
            
            PASSED=$(cat test-results/ctrf-report.json | jq -r '.results.summary.passed // 0')
            FAILED=$(cat test-results/ctrf-report.json | jq -r '.results.summary.failed // 0')
            SKIPPED=$(cat test-results/ctrf-report.json | jq -r '.results.summary.skipped // 0')
            TOTAL=$(cat test-results/ctrf-report.json | jq -r '.results.summary.tests // 0')
            START_TIME=$(cat test-results/ctrf-report.json | jq -r '.results.summary.start')
            STOP_TIME=$(cat test-results/ctrf-report.json | jq -r '.results.summary.stop')
            
            echo "🎯 Environment: ${{ matrix.environment }}"
            echo "🌐 Browser: ${{ matrix.browser }}"
            echo "📅 Test Run: $(date)"
            echo "⏱️  Start Time: $START_TIME"
            echo "⏱️  Stop Time: $STOP_TIME"
            echo ""
            echo "📊 Results Summary:"
            echo "   ✅ Passed: $PASSED"
            echo "   ❌ Failed: $FAILED"
            echo "   ⏭️  Skipped: $SKIPPED"
            echo "   📋 Total: $TOTAL"
            echo ""
            
            if [ "$FAILED" -gt 0 ]; then
              echo "❌ FAILED TESTS:"
              cat test-results/ctrf-report.json | jq -r '
                .results.tests[] | 
                select(.status == "failed") | 
                "   🔍 " + .name + " (" + (.duration | tostring) + "ms)"
              '
              echo ""
            fi
            
            echo "=================================================================================="
          else
            echo "⚠️  No CTRF report found at test-results/ctrf-report.json"
          fi

      - name: 🤖 Generate AI Analysis
        if: always()
        run: |
          if [ -f "test-results/ctrf-report.json" ]; then
            echo "🤖 Generating AI analysis for nightly test results..."
            npm run ai:report
          else
            echo "⚠️  No CTRF report found, skipping AI analysis"
          fi
        continue-on-error: true

      - name: 📧 Send Failure Notification
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const title = `🚨 Nightly Test Failure - ${{ matrix.browser }} on ${{ matrix.environment }}`;
              const body = `
              Nightly test run failed for:
              - Browser: ${{ matrix.browser }}
              - Environment: ${{ matrix.environment }}
              - Run: ${{ github.run_id }}
              - Workflow: ${{ github.workflow }}
              - Commit: ${{ github.sha }}
              
              Please check the logs and reports for details:
              ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
              `;
              
              const response = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['bug', 'nightly-test', 'automation']
              });
              
              console.log(`✅ Issue created successfully: #${response.data.number}`);
            } catch (error) {
              console.log(`❌ Failed to create issue: ${error.message}`);
              console.log(`📋 Would have created issue with title: 🚨 Nightly Test Failure - ${{ matrix.browser }} on ${{ matrix.environment }}`);
              
              // Still fail the step to indicate the notification couldn't be sent
              throw new Error(`Issue creation failed: ${error.message}`);
            }
        continue-on-error: true

      - name: � Upload CTRF Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ctrf-nightly-${{ matrix.browser }}-${{ matrix.environment }}
          path: |
            test-results/ctrf-report.json
            ctrf/
          retention-days: 30

      - name: �📋 Upload Comprehensive Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nightly-reports-${{ matrix.browser }}-${{ matrix.environment }}
          path: |
            playwright-report/
            ai-reports/
            test-results/
          retention-days: 7

  performance-test:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎭 Install Playwright Browsers
        run: npx playwright install --with-deps chromium

      - name: ⚡ Run Performance Tests
        run: |
          npx playwright test --project=chromium --grep="@performance"
        continue-on-error: true

      - name: � Generate Performance CTRF Summary
        if: always()
        run: |
          if [ -f "test-results/ctrf-report.json" ]; then
            echo "📈 Performance Test CTRF Summary"
            npm run ctrf:summary
          else
            echo "⚠️  No performance test CTRF report found"
          fi
        continue-on-error: true

      - name: �📈 Upload Performance Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: |
            test-results/ctrf-report.json
            playwright-report/
            test-results/
          retention-days: 14

  weekly-report:
    name: 📊 Weekly Test Report
    runs-on: ubuntu-latest
    needs: [comprehensive-test, performance-test]
    if: always() && github.event.schedule == '0 2 * * 0'  # Only on Sunday
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download all reports
        uses: actions/download-artifact@v4
        with:
          path: weekly-reports/

      - name: 📊 Generate Weekly Summary
        run: |
          echo "# 📊 Weekly Test Summary" > weekly-summary.md
          echo "Generated on: $(date)" >> weekly-summary.md
          echo "" >> weekly-summary.md
          
          # Count test files and add summary
          find weekly-reports -name "*.json" | wc -l | xargs echo "Total test report files:" >> weekly-summary.md
          
          # Add more detailed analysis here if needed
        
      - name: 📧 Create Weekly Issue
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summary = fs.readFileSync('weekly-summary.md', 'utf8');
            
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `📊 Weekly Test Report - Week of ${new Date().toISOString().split('T')[0]}`,
              body: summary,
              labels: ['report', 'weekly', 'automation']
            });
