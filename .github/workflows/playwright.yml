name: 🎭 Playwright Tests with Advanced Reporting

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test against'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      browser:
        description: 'Browser to test'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - chromium
          - firefox
          - webkit

env:
  NODE_VERSION: '20'
  PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: '1'

jobs:
  # Build and prepare job
  build:
    name: 🏗️ Build & Prepare
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.key }}
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔨 Build TypeScript
        run: npm run build
        continue-on-error: true

      - name: 🔍 Generate cache key
        id: cache-key
        run: echo "key=deps-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}" >> $GITHUB_OUTPUT

      - name: 💾 Cache node modules
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ steps.cache-key.outputs.key }}

  # Test job with matrix strategy
  test:
    name: 🧪 Test (${{ matrix.browser }})
    runs-on: ubuntu-latest
    needs: build
    timeout-minutes: 60
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        exclude:
          - browser: ${{ github.event.inputs.browser != 'all' && github.event.inputs.browser != matrix.browser && 'excluded' || 'included' }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Restore dependencies
        uses: actions/cache@v3
        with:
          path: node_modules
          key: ${{ needs.build.outputs.cache-key }}

      - name: 📦 Install dependencies (fallback)
        run: npm ci
        if: steps.cache.outputs.cache-hit != 'true'

      - name: 🎭 Install Playwright Browsers
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: 🧪 Run Playwright tests
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          TEST_ENV: ${{ github.event.inputs.environment || 'staging' }}
          CI: true

      - name: 📊 Generate CTRF Summary
        if: always()
        run: |
          if [ -f "ctrf/ctrf-report.json" ]; then
            npm run ctrf:summary
          else
            echo "No CTRF report found"
          fi

      - name: 📈 Upload CTRF Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ctrf-report-${{ matrix.browser }}
          path: ctrf/
          retention-days: 30

      - name: 📋 Upload Playwright Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report-${{ matrix.browser }}
          path: playwright-report/
          retention-days: 30

      - name: 📸 Upload Screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-${{ matrix.browser }}
          path: |
            test-results/
            *.png
          retention-days: 7

  # AI Analysis job (runs only on failures)
  ai-analysis:
    name: 🤖 AI Test Analysis
    runs-on: ubuntu-latest
    needs: test
    if: failure()
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📥 Download CTRF reports
        uses: actions/download-artifact@v4
        with:
          pattern: ctrf-report-*
          path: downloaded-reports/
          merge-multiple: true

      - name: 🤖 Generate AI Analysis
        run: |
          # Check if we have CTRF reports to analyze
          if find downloaded-reports -name "*.json" -type f | grep -q .; then
            echo "CTRF reports found, generating AI analysis..."
            npm run ai:analyze
          else
            echo "No CTRF reports found, skipping AI analysis"
          fi
        continue-on-error: true

      - name: 📋 Upload AI Analysis Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ai-analysis-report
          path: |
            ai-reports/
            *.html
          retention-days: 30

  # Report consolidation job
  consolidate-reports:
    name: 📊 Consolidate Reports
    runs-on: ubuntu-latest
    needs: [test]
    if: always()
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📥 Download all CTRF reports
        uses: actions/download-artifact@v4
        with:
          pattern: ctrf-report-*
          path: all-reports/
          merge-multiple: true

      - name: 🔄 Merge CTRF Reports
        run: |
          if find all-reports -name "*.json" -type f | grep -q .; then
            echo "Merging CTRF reports..."
            npm run ctrf:merge
            npm run ctrf:summary
          else
            echo "No CTRF reports to merge"
          fi
        continue-on-error: true

      - name: 📊 Upload Consolidated Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-test-report
          path: |
            ctrf/
            *.json
          retention-days: 30

      - name: 📈 Comment PR with Results
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            try {
              const reportPath = 'ctrf/ctrf-report.json';
              if (fs.existsSync(reportPath)) {
                const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
                const { results } = report;
                
                const summary = `
            ## 🎭 Playwright Test Results
            
            | Metric | Value |
            |--------|--------|
            | ✅ Passed | ${results.summary.passed} |
            | ❌ Failed | ${results.summary.failed} |
            | ⏭️ Skipped | ${results.summary.skipped} |
            | ⏱️ Duration | ${(results.summary.stop - results.summary.start) / 1000}s |
            
            **Environment:** ${process.env.TEST_ENV || 'staging'}
            **Browsers:** ${JSON.stringify(process.env.BROWSERS || 'all')}
            `;
                
                github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: summary
                });
              }
            } catch (error) {
              console.log('Could not generate test summary:', error);
            }
