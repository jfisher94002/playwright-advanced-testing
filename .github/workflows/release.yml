name: 🚀 Release Pipeline

on:
  release:
    types: [published]
  push:
    tags:
      - 'v*'

env:
  NODE_VERSION: '20'

jobs:
  validate-release:
    name: ✅ Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 60
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔨 Build project
        run: npm run build

      - name: 🎭 Install Playwright Browsers
        run: npx playwright install --with-deps

      - name: 🧪 Run smoke tests
        run: npx playwright test --grep="@smoke"

      - name: 🧪 Run critical path tests
        run: npx playwright test --grep="@critical"

      - name: 📊 Generate release validation report
        if: always()
        run: |
          npm run ctrf:summary
          echo "# 🚀 Release Validation Report" > validation-report.md
          echo "Version: ${{ github.ref_name }}" >> validation-report.md
          echo "Date: $(date)" >> validation-report.md
          echo "" >> validation-report.md
          
          if [ -f "ctrf/ctrf-report.json" ]; then
            echo "✅ Tests executed successfully" >> validation-report.md
          else
            echo "❌ Test execution failed" >> validation-report.md
          fi

      - name: 📋 Upload validation artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: release-validation-${{ github.ref_name }}
          path: |
            playwright-report/
            ctrf/
            validation-report.md
          retention-days: 90

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run npm audit
        run: npm audit --audit-level high
        continue-on-error: true

      - name: 🔒 Run security scan
        run: |
          npx audit-ci --config audit-ci.json
        continue-on-error: true

  documentation:
    name: 📚 Update Documentation
    runs-on: ubuntu-latest
    needs: [validate-release]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📚 Generate API docs
        run: |
          echo "# 📚 API Documentation - ${{ github.ref_name }}" > API.md
          echo "Generated on: $(date)" >> API.md
          echo "" >> API.md
          echo "## Available Scripts" >> API.md
          echo "" >> API.md
          echo "- \`npm test\` - Run all tests" >> API.md
          echo "- \`npm run test:summary\` - Run tests with CTRF summary" >> API.md
          echo "- \`npm run ai:report\` - Generate AI analysis" >> API.md
          echo "- \`npm run ctrf:view\` - View CTRF reports" >> API.md

      - name: 📚 Update changelog
        run: |
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## [${{ github.ref_name }}] - $(date +%Y-%m-%d)" >> CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "### Added" >> CHANGELOG.md
          echo "- Release validation pipeline" >> CHANGELOG.md
          echo "- Enhanced GitHub Actions workflows" >> CHANGELOG.md
          echo "- Comprehensive testing and reporting" >> CHANGELOG.md

      - name: 📤 Commit documentation updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add API.md CHANGELOG.md
          git diff --staged --quiet || git commit -m "docs: update documentation for ${{ github.ref_name }}"
          git push
        continue-on-error: true

  notify-release:
    name: 📢 Notify Release
    runs-on: ubuntu-latest
    needs: [validate-release, security-scan, documentation]
    if: always()
    
    steps:
      - name: 📢 Create release summary
        uses: actions/github-script@v7
        with:
          script: |
            const releaseNotes = `
            ## 🚀 Release ${{ github.ref_name }} Summary
            
            ### ✅ Validation Status
            - Smoke Tests: ${{ needs.validate-release.result == 'success' && '✅ Passed' || '❌ Failed' }}
            - Security Scan: ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Failed' }}
            - Documentation: ${{ needs.documentation.result == 'success' && '✅ Updated' || '❌ Failed' }}
            
            ### 📊 Test Results
            Check the artifacts for detailed test reports and analysis.
            
            ### 🔗 Links
            - [Release Page](https://github.com/${{ github.repository }}/releases/tag/${{ github.ref_name }})
            - [Validation Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            // Update the release description
            try {
              const release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: '${{ github.ref_name }}'
              });
              
              await github.rest.repos.updateRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.data.id,
                body: release.data.body + '\n\n' + releaseNotes
              });
            } catch (error) {
              console.log('Could not update release notes:', error);
            }
